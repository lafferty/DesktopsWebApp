<#

.SYNOPSIS

Long running script that deletes a XenDesktop Catalog and a XenDestkop Delivery group,
i.e. a DIaaS Desktop Group


.DESCRIPTION

Uses XenDesktop SDK, see http://support.citrix.com/proddocs/topic/xendesktop-71/cds-sdk-example-create-catalog.html


.PARAMETER catalogName

Request results for a specific catalog. Optional


.PARAMETER ddcAddress

FQDN and port for DDC, e.g. "xdc1.DesktopWebApp.cambourne.cloud.com:80"


.PARAMETER catalogName

Name of catalog to create.  Limited to be NETBios name length less number of chacters in the
desktopNamingScheme.  E.g. for 12 when haracters, e.g. "TestMar12A"


.PARAMETER desktopNamingScheme

Wildcard for format for unique prefix of machine names used with the catalog.  E.g. "###" results
in a number prefix starting at "001".


.PARAMETER desktopGrpName

Name of delivery group to be created using the catalog of machines.  This should always be
$catalogName + "_desktopgrp"


.PARAMETER log

log4net.ILog object used for logging calls. Optional, however the log4net.ILog type must be loaded
into the PowerShell RunSpace for this script to work.

Therefore, if you are running from a PowerShell, first call InitLog4net.ps1  This will load the 
necessary assemblies for the log4net.ILog type to resolve.

.PARAMETER ndcContext

GUID that cross references this logging message with those generated by thread to kicked off
the script.  Optional.

.NOTES
    (c)opyright Citrix Systems
    Version:        1.0
    Author:			Donal Lafferty
    Creation Date:	2014-03-11
    Purpose/Change: CloudDestkop
 
You need to run this function as a user with admin access to XenDesktop

#>

Param (
    [string]$ddcAddress,
    [string]$catalogName,
    [string]$desktopGrpName,
    [log4net.ILog]$log,
    [string]$ndcContext
)

Add-pssnapin citrix.*

function LogDebug($msg) {
    if ($log){
        $log.Debug("$ndcContext $msg")
    } else {
        Write-Host($msg) 
    }
}
function LogInfo($msg) {
    if ($log){
        $log.Info("$ndcContext $msg")
    } else {
        Write-Host($msg) 
    }
}
function LogError($msg) {
    if ($log){
        $log.Error("$ndcContext $msg")
    } else {
    Write-Error($msg) 
    } 
}


#--- START TEST SAMPLE ---

<#
{"ddcAddress":"xdc1.DesktopWebApp.cambourne.cloud.com:80","catalogName":"Mar18TestA","desktopGrpName":"Mar18TestA_desktopgrp"}
$ddcAddress="xdc1.DesktopWebApp.cambourne.cloud.com:80"
$catalogName="Apr3TestC"
$desktopGrpName = $catalogName + "_desktopgrp"
#>


#--- END TEST SAMPLE ---


LogInfo("Attempting to delete Desktop Group $catalogName" )

$error.clear()
$svcStatus = Get-ConfigServiceStatus  -AdminAddress $ddcAddress
if ($svcStatus -ne "OK")
{
    LogError "Problem with $ddcAddress, ConfigServiceStatus is $svcStatus"
    Return
}

# Query availability of logging
# http://support.citrix.com/proddocs/topic/citrix-configurationlogging-admin-v1-xd75/get-logsite-xd75.html
$logState = Get-LogSite  -AdminAddress $ddcAddress
if ($logState.State -ne "Enabled")
{
    LogError "Problem with $ddcAddress, Logging state is $($logState.State)"
    Return
}

# http://support.citrix.com/proddocs/topic/citrix-configurationlogging-admin-v1-xd75/start-loghighleveloperation-xd75.html
$succeeded = $false #indicates if high level operation succeeded.
$highLevelOp =  Start-LogHighLevelOperation  -AdminAddress $ddcAddress -Source "DeleteCatalogAndDesktopGroup.ps1" -Text "WebApp deleting Catalog `'$catalogName`' "

try 
{
    Set-BrokerCatalogMetadata  -AdminAddress $ddcAddress -CatalogName $catalogName -LoggingId $highLevelOp.Id -Name 'DIaaS_Status' -Value "Deleting"

# Dissolve the DesktopGroup
    LogDebug ("$machines = Get-BrokerMachine  -AdminAddress $ddcAddress -DesktopGroupName $desktopGrpName -MaxRecordCount 2147483647")
    $machines = Get-BrokerMachine  -AdminAddress $ddcAddress -DesktopGroupName $desktopGrpName -MaxRecordCount 2147483647
    LogDebug ("Set-BrokerMachineMaintenanceMode  -AdminAddress $ddcAddress -InputObject $machines -LoggingId $($highLevelOp.Id) -MaintenanceMode $False")
    Set-BrokerMachineMaintenanceMode  -AdminAddress $ddcAddress -InputObject $machines -LoggingId $highLevelOp.Id -MaintenanceMode $False

    LogDebug ("$desktopGrpObj = Remove-BrokerDesktopGroup  -AdminAddress $ddcAddress -LoggingId $($highLevelOp.Id) -Name $desktopGrpName -Force ")
    $desktopGrpObj = Remove-BrokerDesktopGroup  -AdminAddress $ddcAddress -LoggingId $highLevelOp.Id -Name $desktopGrpName -Force

    $provScheme = Get-ProvScheme  -AdminAddress $ddcAddress -ProvisioningSchemeName $catalogName

    LogDebug ("Obtain list of VMs in the catalog")
    LogDebug ("calling Get-ProvVM -provisioningSchemeName $catalogName  -AdminAddress $ddcAddress ")
    $newVMs =  Get-ProvVM -provisioningSchemeName $catalogName -AdminAddress $ddcAddress 
    LogInfo("Removing VMs from hypervisor or cloud, one at a time from ($newVMs)")

    foreach ( $newVM in $newVMs )
    { 
        $delSucceeded = $false #indicates if first delete attempt succeeded

        if ($newVM.Lock)
        {
            LogDebug ("Unlock-ProvVM  -AdminAddress $ddcAddress -LoggingId $($highLevelOp.Id) -ProvisioningSchemeName $catalogName -VMID @( $($newVM.VMId)) )")
            Unlock-ProvVM  -AdminAddress $ddcAddress -LoggingId $highLevelOp.Id -ProvisioningSchemeName $catalogName -VMID @($newVM.VMId)
        }

        LogDebug ("Remove-ProvVM -AdminAddress $ddcAddress -LoggingId $($highLevelOp.Id) -ProvisioningSchemeName $catalogName  -VMName @( $($newVM.VMName) )")
        $removeVmResult = Remove-ProvVM -AdminAddress $ddcAddress -LoggingId $highLevelOp.Id -ProvisioningSchemeName $catalogName  -VMName @( $newVM.VMName )
        if (![string]::IsNullOrEmpty($removeVmResult.TerminatingError)) { 
            LogError("Error with Remove-ProvVM call on $($newVMs.VMName) due to $($removeVmResult.TerminatingError) full info: $removeVmResult")
        }
        elseif ($removeVmResult.VirtualMachinesFailedCount -ne 0) { 
            LogError("Error with Remove-ProvVM call on $($newVMs.VMName), the VM did not delete because $($removeVmResult.FailedVirtualMachines[0].Message), details: $($removeVmResult.FailedVirtualMachines[0].Details) full info: $removeVmResult")
        }
        else
        {
            LogDebug ("Deleted VM $($newVMs.VMName), result was $removeVmResult")
            $delSucceeded = $true
        }

        if (!$delSucceeded)
        {
            LogDebug ("Second Remove-ProvVM -AdminAddress $ddcAddress -LoggingId $($highLevelOp.Id) -ProvisioningSchemeName $catalogName  -VMName @( $($newVM.VMName) )")
            $removeVmResult = Remove-ProvVM -AdminAddress $ddcAddress -LoggingId $highLevelOp.Id -ProvisioningSchemeName $catalogName  -VMName @( $newVM.VMName )
            if (![string]::IsNullOrEmpty($removeVmResult.TerminatingError)) { 
                LogError("Error with Remove-ProvVM call on $($newVMs.VMName) due to $($removeVmResult.TerminatingError) full info: $removeVmResult")
            }
            elseif ($removeVmResult.VirtualMachinesFailedCount -ne 0) { 
                LogError("Error with Remove-ProvVM call on $($newVMs.VMName), the VM did not delete because $($removeVmResult.FailedVirtualMachines[0].Message), details: $($removeVmResult.FailedVirtualMachines[0].Details) full info: $removeVmResult")
            }
            else
            {
                LogDebug ("Deleted VM $($newVMs.VMName), result was $removeVmResult")
                $delSucceeded = $true
            }
        }
    }

    $machines = Get-BrokerMachine -CatalogName $catalogName -MaxRecordCount 2147483647 -Skip 0

    LogInfo("Removing machines from the desktop group catalog, one at a time from $($machines)")
    foreach ($machine in $machines)
    {
        try {
            LogDebug ("Remove-BrokerMachine  -AdminAddress $ddcAddress -Force -MachineName $($machine.MachineName) -LoggingId $($highLevelOp.Id)" )
            Remove-BrokerMachine  -AdminAddress $ddcAddress -Force -MachineName  $machine.MachineName -LoggingId $highLevelOp.Id
            LogDebug ("Remove-BrokerMachine  success for -MachineName $($machine.MachineName) -LoggingId $($highLevelOp.Id)" )
        }
        catch [System.Exception] {
            LogError("Remove-BrokerMachine  - from $($machine.MachineName) threw with " + $_ )
        }
    }

    
    LogInfo ("Remove-ProvScheme  -AdminAddress $ddcAddress -LoggingId $($highLevelOp.Id) -ProvisioningSchemeName $catalogName")
    Remove-ProvScheme  -AdminAddress $ddcAddress -LoggingId $highLevelOp.Id -ProvisioningSchemeName $catalogName


    LogInfo ("Get-AcctIdentityPool  -AdminAddress $ddcAddress -IdentityPoolName $catalogName")
    $acctIdPool = Get-AcctIdentityPool  -AdminAddress $ddcAddress -IdentityPoolName $catalogName
    LogInfo ("Get-AcctADAccount  -AdminAddress $ddcAddress -IdentityPoolUid $($acctIdPool.IdentityPoolUid) -MaxRecordCount 2147483647")
    $acctADAccounts = Get-AcctADAccount  -AdminAddress $ddcAddress -IdentityPoolUid $acctIdPool.IdentityPoolUid -MaxRecordCount 2147483647

    if ($acctADAccounts) {
        $acctSIDS = @($acctADAccounts.ADAccountSid)

        LogDebug ("Remove-AcctADAccount  -ADAccountSid @( $acctSIDS ) -AdminAddress $ddcAddress -Force -IdentityPoolUid $($acctIdPool.IdentityPoolUid) -LoggingId $($highLevelOp.Id) -RemovalOption 'Delete'");
        $delAcctResult = Remove-AcctADAccount  -ADAccountSid @($acctSIDS) -AdminAddress $ddcAddress -Force -IdentityPoolUid $acctIdPool.IdentityPoolUid -LoggingId $highLevelOp.Id -RemovalOption 'Delete'
        LogDebug ("Result of Remove-AcctADAccount: $($delAcctResult.FailedAccountsCount) Failures due to $($delAcctResult.FailedAccounts[0].ErrorReason)")
    }
    
    LogInfo ("Remove-AcctIdentityPool -AdminAddress $ddcAddress -IdentityPoolUid $($acctIdPool.IdentityPoolUid) -LoggingId $($highLevelOp.Id)")
    Remove-AcctIdentityPool -AdminAddress $ddcAddress -IdentityPoolUid $acctIdPool.IdentityPoolUid -LoggingId $highLevelOp.Id 

    LogInfo ("Remove-BrokerCatalog  -AdminAddress $ddcAddress -Name $catalogName -LoggingId $($highLevelOp.Id)")
    Remove-BrokerCatalog  -AdminAddress $ddcAddress -Name $catalogName -LoggingId $highLevelOp.Id

    $testResult = Test-BrokerAssignmentPolicyRuleNameAvailable  -AdminAddress $ddcAddress -Name @($desktopGrpName)
    if (!$testResult.Available) {
        LogInfo ("Remove-BrokerAssignmentPolicyRule -Name $desktopGrpName -AdminAddress $ddcAddress -LoggingId $($highLevelOp.Id)  ")
        Remove-BrokerAssignmentPolicyRule -Name $desktopGrpName -AdminAddress $ddcAddress -LoggingId $highLevelOp.Id  
    }

<# Appears to be removed when the DesktopGroup goes away.
    LogInfo ('Remove-BrokerAccessPolicyRule  -AdminAddress $ddcAddress -LoggingId $($highLevelOp.Id) -Name "$($desktopGrpName)_AG"')
    Remove-BrokerAccessPolicyRule  -AdminAddress $ddcAddress -LoggingId $highLevelOp.Id -Name "$($desktopGrpName)_AG"

    LogInfo ('Remove-BrokerAccessPolicyRule  -AdminAddress $ddcAddress -LoggingId $($highLevelOp.Id) -Name "$($desktopGrpName)_Direct"')
    Remove-BrokerAccessPolicyRule  -AdminAddress $ddcAddress -LoggingId $highLevelOp.Id -Name "$($desktopGrpName)_Direct"

    LogInfo ('Remove-BrokerPowerTimeScheme -Name "$($desktopGrpName)_Weekdays" -AdminAddress $ddcAddress -LoggingId $($highLevelOp.Id)')
    Remove-BrokerPowerTimeScheme -Name "$($desktopGrpName)_Weekdays" -AdminAddress $ddcAddress -LoggingId $highLevelOp.Id 

    LogInfo ('Remove-BrokerPowerTimeScheme -Name "$($desktopGrpName)_Weekend" -AdminAddress $ddcAddress -LoggingId $($highLevelOp.Id)')
    Remove-BrokerPowerTimeScheme -Name "$($desktopGrpName)_Weekend" -AdminAddress $ddcAddress -LoggingId $highLevelOp.Id 
    #>

    $succeeded = $True
}
catch [System.Exception] {
    LogError("Problem with desktop delivery group deletion " + $_ )
    Set-BrokerCatalogMetadata  -AdminAddress $ddcAddress -CatalogName $catalogName -LoggingId $highLevelOp.Id -Name 'DIaaS_Status' -Value "Problem during delete"
    throw $_
}
finally
{
    # Log high level operation stop, and indicate its success
    # http://support.citrix.com/proddocs/topic/citrix-configurationlogging-admin-v1-xd75/start-loghighleveloperation-xd75.html
    Stop-LogHighLevelOperation  -AdminAddress $ddcAddress -HighLevelOperationId $highLevelOp.Id -IsSuccessful $succeeded
}
LogInfo("Succeeded in deleting catalog $catalogName")
