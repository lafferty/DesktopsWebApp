<#

.SYNOPSIS

Long running script that generates a XenDesktop Catalog and a XenDestkop Delivery group,
which results in a DIaaS Desktop Group


.DESCRIPTION

Uses XenDesktop SDK, see http://support.citrix.com/proddocs/topic/xendesktop-71/cds-sdk-example-create-catalog.html

Parameters below could be more concise, since the data each provides overlaps.


.PARAMETER  controllerAddress

FQDN for DDC, e.g. "xdc1.DesktopWebApp.cambourne.cloud.com"


.PARAMETER ddcAddress

FQDN and port for DDC, e.g. "xdc1.DesktopWebApp.cambourne.cloud.com:80"


.PARAMETER catalogName

Name of catalog to create.  Limited to be NETBios name length less number of chacters in the
desktopNamingScheme.  E.g. for 12 when haracters, e.g. "TestMar12A"


.PARAMETER desktopNamingScheme

Wildcard for format for unique prefix of machine names used with the catalog.  E.g. "###" results
in a number prefix starting at "001".


.PARAMETER desktopGrpName

Name of delivery group to be created using the catalog of machines.  This should always be
$catalogName + "_desktopgrp"


.PARAMETER catalogDesc

Description of the desktop group.  E.g. "Unit Test CloudStack Catalog"


.PARAMETER desktopAllocationType

For virtual desktops, indicates whether the desktop will be permanently assigned to a user.
Options are "Random" and "Permanent"


.PARAMETER desktopDomain

FQDN for the desktops, e.g. "DesktopWebApp.cambourne.cloud.com"


.PARAMETER hostingUnitName

Name of XenDesktop hostingunit that will provision the VMs, e.g. "CloudPlatformHost"


.PARAMETER hostPath

Path for XenDesktop hosting unit that will provision the VMs, 
e.g. 'XDHyp:\HostingUnits\CloudPlatformHost' 


.PARAMETER zonePath

Path for zone in hosting unit that will contain the VMs.  
E.g 'XDHyp:\HostingUnits\CloudPlatformHost\Zone1.availabilityzone'


.PARAMETER networkPath

Path for network to put provisioned VMs on.  E.g. 
'XDHyp:\HostingUnits\CloudPlatformHost\Zone1.availabilityzone\GuestSharedNetwork(172.16.200.0`/24).network'


.PARAMETER templatePath

Path for image template to use for provisioning VMs.  E.g 
'XDHyp:\HostingUnits\CloudPlatformHost\Zone1.availabilityzone\CloudDesktopVDA.template'


.PARAMETER computerOffering

Path for service offering that allocates CPU and memory to the provisioned VM.
E.g. 'XDHyp:\HostingUnits\CloudPlatformHost\Power User.serviceoffering'


.PARAMETER desktopCount

Number of desktops in the group. E.g. "1"


.PARAMETER machineCount

Number of machines used to deliver the desktops.  This can differ from desktopCount when using 
published desktops.


.PARAMETER userNames

Array of Active Directory users and groups with access to the desktop group machines.  
E.g. @('DesktopWebApp\Domain Users')


.PARAMETER securityGroups

In the case of a shared network, a security group will be required.  E.g. 
"XDHyp:\HostingUnits\default.securitygroup"

Where the network does not support security groups, this should be left null.


.PARAMETER log

log4net.ILog object used for logging calls. Optional, however the log4net.ILog type must be loaded
into the PowerShell RunSpace for this script to work.

Therefore, if you are running from a PowerShell, first call InitLog4net.ps1  This will load the 
necessary assemblies for the log4net.ILog type to resolve.


.PARAMETER ndcContext

GUID that cross references this logging message with those generated by thread to kicked off
the script.  Optional.


.NOTES
    (c)opyright Citrix Systems
    Version:        1.0
    Author:			Donal Lafferty
    Creation Date:	2014-03-11
    Purpose/Change: CloudDestkop
 
You need to run this function as a user with admin access to XenDesktop

#>

Param (
    [string]$ddcAddress,
    [string]$catalogName,
    [string]$catalogDesc,
    [string]$desktopAllocationType,
    [string]$catalogSessionSupport,
    [string]$desktopDomain,
    [string]$desktopNamingScheme,
    [string]$networkPath,
    [string]$templatePath,
    [string]$hostingUnitName,
    [string]$controllerAddress,
    [string]$desktopCount,
    [string]$computerOffering,
    [string[]]$userNames,
    [string]$desktopGrpName,
    [string]$machineCount,
    [string]$securityGroups,
    [string]$persistUserChanges,
    [string]$desktopCleanOnBoot,
    [log4net.ILog]$log,
    [string]$ndcContext
)

Add-pssnapin citrix.*

function LogDebug($msg) {
    if ($log){
        $log.Debug("$ndcContext $msg")
    } else {
        Write-Host($msg) 
    }
}
function LogInfo($msg) {
    if ($log){
        $log.Info("$ndcContext $msg")
    } else {
        Write-Host($msg) 
    }
}
function LogError($msg) {
    if ($log){
        $log.Error("$ndcContext $msg")
    } else {
    Write-Error($msg) 
    } 
}


#--- START TEST SAMPLE ---

<#
$controllerAddress="xdc1.DesktopWebApp.cambourne.cloud.com"
$ddcAddress=$controllerAddress+":80"
$catalogName="TestMar12A"
$desktopNamingScheme=$catalogName + "###"
$desktopGrpName = $catalogName + "_desktopgrp"
$catalogDesc="Unit Test CloudStack Catalog"
$desktopAllocationType="Permanent"
$desktopDomain="DesktopWebApp.cambourne.cloud.com"
$hostingUnitName="CloudPlatformHost"
$hostPath = 'XDHyp:\HostingUnits\' + $hostingUnitName
$zonePath = $hostPath + '\Zone1.availabilityzone'
$networkPath= $zonePath + '\GuestSharedNetwork(172.16.200.0`/24).network'
$templatePath=$zonePath + '\CloudDesktopVDA.template'
$desktopCount=1
$computerOffering=$hostPath + '\Power User.serviceoffering'
$machineCount = 1
$userNames = @('DesktopWebApp\Administrator')
$securityGroups = $hostPath + "\default.securitygroup"
#>
#--- END TEST SAMPLE ---


#------------------START CatalogCreate-------------------------------

LogInfo("Attempting to create catalog $catalogName with $machineCount machines" )

$error.clear()
$svcStatus = Get-ConfigServiceStatus  -AdminAddress $ddcAddress
if ($svcStatus -ne "OK")
{
    LogError "Problem with $ddcAddress, ConfigServiceStatus is $svcStatus"
    Return
}

# Query availability of logging
# http://support.citrix.com/proddocs/topic/citrix-configurationlogging-admin-v1-xd75/get-logsite-xd75.html
# TODO: exit if logging is not available
$logState = Get-LogSite  -AdminAddress $ddcAddress
if ($logState.State -ne "Enabled")
{
    LogError "Problem with $ddcAddress, Logging state is $($logState.State)"
    Return
}

# http://support.citrix.com/proddocs/topic/citrix-configurationlogging-admin-v1-xd75/start-loghighleveloperation-xd75.html
$succeeded = $false #indicates if high level operation succeeded.
$highLevelOp =  Start-LogHighLevelOperation  -AdminAddress $ddcAddress -Source "CreateCatalogAndDesktopGroup.ps1" -Text "WebApp creating Catalog `'$catalogName`' "

try 
{
    # http://support.citrix.com/proddocs/topic/citrix-broker-admin-v2-xd75/new-brokercatalog-xd75.html
    # Use Get-BrokerCatalog to inspect catalog properties if unsure
    LogDebug ("New-BrokerCatalog  -AdminAddress $ddcAddress -AllocationType $desktopAllocationType -Description $catalogDesc -IsRemotePC $False -LoggingId $highLevelOp.Id -MinimumFunctionalLevel 'L7' -Name $catalogName -PersistUserChanges $persistUserChanges -ProvisioningType 'MCS' -Scope @() -SessionSupport $catalogSessionSupport")
    $newCatalog =  New-BrokerCatalog  -AdminAddress $ddcAddress -AllocationType $desktopAllocationType -Description $catalogDesc -IsRemotePC $False -LoggingId $highLevelOp.Id -MinimumFunctionalLevel 'L7' -Name $catalogName -PersistUserChanges $persistUserChanges -ProvisioningType 'MCS' -Scope @() -SessionSupport $catalogSessionSupport
    LogInfo("Created new broker catalog")

    Set-BrokerCatalogMetadata  -AdminAddress $ddcAddress -CatalogId $newCatalog.Uid -LoggingId $highLevelOp.Id -Name 'DIaaS_Status' -Value "Creating"

    # http://support.citrix.com/proddocs/topic/citrix-adidentity-admin-v2-xd75/new-acctidentitypool-xd75.html
    # Use Get-AcctIdentityPool to inspect pool properties if unsure
    LogDebug("New-AcctIdentityPool  -AdminAddress $ddcAddress -AllowUnicode -Domain $desktopDomain -IdentityPoolName $catalogName -LoggingId $highLevelOp.Id -NamingScheme $desktopNamingScheme -NamingSchemeType 'Numeric' -Scope @()")
    $acctIdPool = New-AcctIdentityPool  -AdminAddress $ddcAddress -AllowUnicode -Domain $desktopDomain -IdentityPoolName $catalogName -LoggingId $highLevelOp.Id -NamingScheme $desktopNamingScheme -NamingSchemeType 'Numeric' -Scope @()
    LogInfo("Created new identity pool with UID $($acctIdPool.IdentityPoolUid) Full variable is $acctIdPool")

    # http://support.citrix.com/proddocs/topic/citrix-broker-admin-v2-xd75/set-brokercatalogmetadata-xd75.html
    # no output
    LogDebug("Set-BrokerCatalogMetadata  -AdminAddress $ddcAddress -CatalogId $newCatalog.Uid -LoggingId $highLevelOp.Id -Name 'Citrix_DesktopStudio_IdentityPoolUid' -Value $acctIdPool.IdentityPoolUid")
    Set-BrokerCatalogMetadata  -AdminAddress $ddcAddress -CatalogId $newCatalog.Uid -LoggingId $highLevelOp.Id -Name 'Citrix_DesktopStudio_IdentityPoolUid' -Value $acctIdPool.IdentityPoolUid
    LogInfo("Set broker catalog with identity pool details")

    $provSchemeName = Test-ProvSchemeNameAvailable  -AdminAddress $ddcAddress -ProvisioningSchemeName @($catalogName)
    LogInfo("Checked whether prov scheme name ($catalogName) is available")

    $securityGroupArray = @()
    if (![string]::IsNullOrEmpty($securityGroups)) {
        $securityGroupArray = @($securityGroups)
    }

    if ($provSchemeName.Available) {
        Set-BrokerCatalogMetadata  -AdminAddress $ddcAddress -CatalogId $newCatalog.Uid -LoggingId $highLevelOp.Id -Name 'DIaaS_Status' -Value "Copying Master Image"

        # http://support.citrix.com/proddocs/topic/citrix-machinecreation-admin-v2-xd75/new-provscheme-xd75.html
        # Note that we run this synchronously.  Asynchronous execution handled at a higher level.


if (![string]::IsNullOrEmpty($desktopCleanOnBoot))
{
        LogInfo("Calling New-ProvScheme  -AdminAddress $ddcAddress -CleanOnBoot -HostingUnitName $hostingUnitName -IdentityPoolName $catalogName -LoggingId $($highLevelOp.Id) -MasterImageVM $templatePath -NetworkMapping @{""0""=$networkPath} -ProvisioningSchemeName $catalogName -Scope @() -SecurityGroup $securityGroupArray  -ServiceOffering $computerOffering")
        $newProvScheme = New-ProvScheme  -AdminAddress $ddcAddress -CleanOnBoot -HostingUnitName $hostingUnitName -IdentityPoolName $catalogName -LoggingId $highLevelOp.Id -MasterImageVM $templatePath -NetworkMapping @{"0"=$networkPath} -ProvisioningSchemeName $catalogName -Scope @() -SecurityGroup $securityGroupArray  -ServiceOffering $computerOffering
}
else
{
        LogInfo("Calling New-ProvScheme  -AdminAddress $ddcAddress -HostingUnitName $hostingUnitName -IdentityPoolName $catalogName -LoggingId $($highLevelOp.Id) -MasterImageVM $templatePath  -NetworkMapping @{""0""=$networkPath} -ProvisioningSchemeName $catalogName -Scope @() -SecurityGroup $securityGroupArray  -ServiceOffering $computerOffering")
        $newProvScheme = New-ProvScheme  -AdminAddress $ddcAddress -HostingUnitName $hostingUnitName -IdentityPoolName $catalogName -LoggingId $highLevelOp.Id -MasterImageVM $templatePath  -NetworkMapping @{"0"=$networkPath} -ProvisioningSchemeName $catalogName -Scope @() -SecurityGroup $securityGroupArray  -ServiceOffering $computerOffering
}

        if (![string]::IsNullOrEmpty($newProvScheme.TerminatingError)) { 
            LogError("Error with New-ProvScheme call ($newProvScheme.TerminatingError) from $newProvScheme")
        }
        LogDebug("New-ProvScheme returned $($newProvScheme)")
        # no need to check status when we are running synchronous script.
        #Get-ProvTask  -AdminAddress $ddcAddress -MaxRecordCount 2147483647 -TaskId 0a025795-925a-4cb2-9d4f-2da640c75ac3

        # http://support.citrix.com/proddocs/topic/citrix-broker-admin-v2-xd75/set-brokercatalog-xd75.html
        # No return value
        LogDebug("calling Set-BrokerCatalog  -AdminAddress $ddcAddress -LoggingId $highLevelOp.Id -Name $catalogName -ProvisioningSchemeId $newProvScheme.ProvisioningSchemeUid  -RemotePCHypervisorConnectionUid $null")
        Set-BrokerCatalog  -AdminAddress $ddcAddress -LoggingId $highLevelOp.Id -Name $catalogName -ProvisioningSchemeId $newProvScheme.ProvisioningSchemeUid  -RemotePCHypervisorConnectionUid $null

        #http://support.citrix.com/proddocs/topic/citrix-machinecreation-admin-v2-xd75/add-provschemecontrolleraddress-xd75.html
        LogDebug("calling Add-ProvSchemeControllerAddress  -AdminAddress $ddcAddress -ControllerAddress @($controllerAddress) -LoggingId $($highLevelOp.Id) -ProvisioningSchemeName $catalogName ")
        $newProvScheme = Add-ProvSchemeControllerAddress  -AdminAddress $ddcAddress -ControllerAddress @($controllerAddress) -LoggingId $highLevelOp.Id -ProvisioningSchemeName $catalogName 
        LogInfo("Add-ProvSchemeControllerAddress generated $($newProvScheme)")

        # http://support.citrix.com/proddocs/topic/citrix-adidentity-admin-v2-xd75/get-acctadaccount-xd75.html
        # check to see if there are already account for the account pool able satisfy this request
        # Get-AcctADAccount  -AdminAddress $ddcAddress -IdentityPoolUid $acctIdPool.IdentityPoolUid -Lock $False -MaxRecordCount 2147483647 -State 'Available'

        # http://support.citrix.com/proddocs/topic/citrix-adidentity-admin-v2-xd75/new-acctadaccount-xd75.html
        LogDebug("calling $newMachineAccts = New-AcctADAccount  -AdminAddress $ddcAddress -Count $desktopCount -IdentityPoolUid $($acctIdPool.IdentityPoolUid) -LoggingId $highLevelOp.Id")
        $newMachineAccts = New-AcctADAccount  -AdminAddress $ddcAddress -Count $desktopCount -IdentityPoolUid $acctIdPool.IdentityPoolUid -LoggingId $highLevelOp.Id
        LogInfo("Result is ...")
        LogInfo("$($newMachineAccts)")
        LogInfo("Generated $($newMachineAccts.SuccessfulAccounts) new accounts, for a variable of $($newMachineAccts)")

        if ([string]::IsNullOrEmpty($newMachineAccts)) {
            LogError("Error with New-AcctADAccount, result is null!")
        } 

        # Build list of machine accounts
        Set-BrokerCatalogMetadata  -AdminAddress $ddcAddress -CatalogId $newCatalog.Uid -LoggingId $highLevelOp.Id -Name 'DIaaS_Status' -Value "Creating Desktops"

        LogDebug("Calling New-ProvVM  -ADAccountName $($newMachineAccts.SuccessfulAccounts) -AdminAddress $ddcAddress -LoggingId $($highLevelOp.Id)  -MaxAssistants 5 -ProvisioningSchemeName $catalogName")
        $newProvVMs = New-ProvVM  -ADAccountName $newMachineAccts.SuccessfulAccounts -AdminAddress $ddcAddress -LoggingId $highLevelOp.Id  -MaxAssistants 5 -ProvisioningSchemeName $catalogName
        LogInfo("New-ProvVM reported $($newProvVMs)")

        # Only works if catalog is new, otherwise, you have to figure out the new VMs from their machine name, which is not quite the same as the account name.
        LogDebug ("calling Get-ProvVM -provisioningSchemeName $catalogName")
        $newVMs =  Get-ProvVM -provisioningSchemeName $catalogName
        LogInfo("Adding VMs to catalog, one at a time from ($newVMs)")

        foreach ( $newVM in $newVMs )
        { 
            LogDebug ("Lock-ProvVM  -AdminAddress $ddcAddress -LoggingId $($highLevelOp.Id) -ProvisioningSchemeName $catalogName -Tag 'Brokered' -VMID @($newVM.VMId)")
            Lock-ProvVM  -AdminAddress $ddcAddress -LoggingId $highLevelOp.Id -ProvisioningSchemeName $catalogName -Tag 'Brokered' -VMID @($newVM.VMId)

            LogDebug ("New-BrokerMachine  -AdminAddress $ddcAddress -CatalogUid $newCatalog.Uid -LoggingId $($highLevelOp.Id) -MachineName $newVM.ADAccountSid")
            $newBrokeredMachine = New-BrokerMachine  -AdminAddress $ddcAddress -CatalogUid $newCatalog.Uid -LoggingId $highLevelOp.Id -MachineName $newVM.ADAccountSid
            LogDebug ("Result from New-BrokerMachine was $newBrokerMachine")
        }
        $succeeded = $true
    }
    else
    {
        LogError("Problem with provisioning scheme, $($provSchemeName.Name) is $($provSchemeName.Available)" )
    }
}
catch [System.Exception] {
    Set-BrokerCatalogMetadata  -AdminAddress $ddcAddress -CatalogId $newCatalog.Uid -LoggingId $highLevelOp.Id -Name 'DIaaS_Status' -Value "Create Desktops failed"
    LogError("Problem with catalog creation " + $_ )
    throw $_
}
finally
{
    # Log high level operation stop, and indicate its success
    # http://support.citrix.com/proddocs/topic/citrix-configurationlogging-admin-v1-xd75/start-loghighleveloperation-xd75.html
    Stop-LogHighLevelOperation  -AdminAddress $ddcAddress -HighLevelOperationId $highLevelOp.Id -IsSuccessful $succeeded
}
#------------------END CatalogCreate -------------------------------

#------------------START DesktopGroupCreate-------------------------------

# verify services available, initiate logging
$error.clear()
$svcStatus = Get-ConfigServiceStatus  -AdminAddress $ddcAddress
if ($svcStatus -ne "OK")
{
    LogError ("Problem with $ddcAddress, ConfigServiceStatus is $svcStatus")
    Return
}

# Query availability of logging
# http://support.citrix.com/proddocs/topic/citrix-configurationlogging-admin-v1-xd75/get-logsite-xd75.html
# TODO: exit if logging is not available
$logState = Get-LogSite  -AdminAddress $ddcAddress
if ($logState.State -ne "Enabled")
{
    LogError ( "Problem with $ddcAddress, Logging state is $($logState.State)" )
    Return
}

# http://support.citrix.com/proddocs/topic/citrix-configurationlogging-admin-v1-xd75/start-loghighleveloperation-xd75.html
$succeeded = $false #indicates if high level operation succeeded.
$highLevelOp =  Start-LogHighLevelOperation  -AdminAddress $ddcAddress -Source "CreateCatalogAndDesktopGroup.ps1" -Text "WebApp creating DeliveryGroup `'$desktopGrpName`' "

try 
{
    Set-BrokerCatalogMetadata  -AdminAddress $ddcAddress -CatalogId $newCatalog.Uid -LoggingId $highLevelOp.Id -Name 'DIaaS_Status' -Value "Assigning users"
    
    $desktopKind = "Shared"
    if ($desktopAllocationType -eq "Permanent")
    {
        $desktopKind = "Private"
    }

    # Setup desktop group, add machines
    LogDebug ("New-BrokerDesktopGroup  -AdminAddress $ddcAddress -ColorDepth 'TwentyFourBit' -DeliveryType 'DesktopsOnly' -Description $catalogName -DesktopKind $desktopKind -InMaintenanceMode $False -IsRemotePC $False -LoggingId $($highLevelOp.Id) -MinimumFunctionalLevel 'L7' -Name $desktopGrpName -OffPeakBufferSizePercent 10 -PeakBufferSizePercent 10 -PublishedName $catalogName -Scope @() -SecureIcaRequired $False -SessionSupport $catalogSessionSupport -ShutdownDesktopsAfterUse $False -TimeZone 'GMT Standard Time'")
    $desktopGrpObj = New-BrokerDesktopGroup  -AdminAddress $ddcAddress -ColorDepth 'TwentyFourBit' -DeliveryType 'DesktopsOnly' -Description 'Admin' -DesktopKind $desktopKind -InMaintenanceMode $False -IsRemotePC $False -LoggingId $highLevelOp.Id -MinimumFunctionalLevel 'L7' -Name $desktopGrpName -OffPeakBufferSizePercent 10 -PeakBufferSizePercent 10 -PublishedName $catalogName -Scope @() -SecureIcaRequired $False -SessionSupport $catalogSessionSupport -ShutdownDesktopsAfterUse $False -TimeZone 'GMT Standard Time'

    LogDebug ("Add-BrokerMachinesToDesktopGroup  -AdminAddress $ddcAddress -Catalog $catalogName -Count $machineCount -DesktopGroup $desktopGrpName -LoggingId $($highLevelOp.Id)")
    Add-BrokerMachinesToDesktopGroup  -AdminAddress $ddcAddress -Catalog $catalogName -Count $machineCount -DesktopGroup $desktopGrpName -LoggingId $highLevelOp.Id

    # Makesure all users are added to the broker
    foreach ( $brokerUser in $userNames)
    {
        # Generates Error record if user cannot be found of type Citrix.Broker.Admin.SDK.SdkOperationException
        LogDebug ("search for existing broker user by calling Get-BrokerUser  -Name $brokerUser")
        $reqdUsers = Get-BrokerUser  -Name $brokerUser
        if (!$reqdUsers) {
            LogDebug ("add missing user by calling New-BrokerUser  -AdminAddress $ddcAddress -Name $brokerUser")
            New-BrokerUser  -AdminAddress $ddcAddress -Name $brokerUser
        }
    }

# We assume this check fails to find the desktop group 
$desktopGroupUid =$desktopGrpObj.Uid

if ($desktopAllocationType -ne "Random")
{
    $testResult = Test-BrokerAssignmentPolicyRuleNameAvailable  -AdminAddress $ddcAddress -Name @($desktopGrpName)
    if ($testResult.Available) {
        LogDebug ("New-BrokerAssignmentPolicyRule  -AdminAddress $ddcAddress -Description 'Admin' -DesktopGroupUid $desktopGroupUid -Enabled $True -IncludedUserFilterEnabled $False -LoggingId $($highLevelOp.Id) -MaxDesktops 1 -Name $desktopGrpName")
        New-BrokerAssignmentPolicyRule  -AdminAddress $ddcAddress -Description 'Admin' -DesktopGroupUid $desktopGroupUid  -Enabled $True -IncludedUserFilterEnabled $False -LoggingId $highLevelOp.Id -MaxDesktops 1 -Name $desktopGrpName
    }
}
else
{ 
    if ($catalogSessionSupport -eq "MultiSession")
    {
        $testResult = Test-BrokerEntitlementPolicyRuleNameAvailable  -AdminAddress $ddcAddress -Name @($desktopGrpName)
        if ($testResult.Available) {
            LogDebug ("New-BrokerEntitlementPolicyRule  -AdminAddress $ddcAddress -DesktopGroupUid $desktopGroupUid -IncludedUserFilterEnabled $False -Enabled $True -LoggingId $($highLevelOp.Id) -Name $desktopGrpName")
            New-BrokerEntitlementPolicyRule  -AdminAddress $ddcAddress -DesktopGroupUid $desktopGroupUid -IncludedUserFilterEnabled $False -Enabled $True -LoggingId $highLevelOp.Id -Name $desktopGrpName
        }
    }
    else
    {

        $testResult = Test-BrokerEntitlementPolicyRuleNameAvailable  -AdminAddress $ddcAddress -Name @($desktopGrpName)
        if ($testResult.Available) {
            LogDebug ("New-BrokerEntitlementPolicyRule  -AdminAddress $ddcAddress -DesktopGroupUid $desktopGroupUid -IncludedUserFilterEnabled $False -Enabled $True -LoggingId $($highLevelOp.Id) -Name $desktopGrpName")
            New-BrokerEntitlementPolicyRule  -AdminAddress $ddcAddress -DesktopGroupUid $desktopGroupUid -IncludedUserFilterEnabled $False -Enabled $True -LoggingId $highLevelOp.Id -Name $desktopGrpName
        }
    }
}

# TODO: remove, this seems redundant
    # Makesure all users are added to the broker
    foreach ( $brokerUser in $userNames)
    {
        # Generates Error record if user cannot be found of type Citrix.Broker.Admin.SDK.SdkOperationException
        $reqdUsers = Get-BrokerUser  -Name $brokerUser
        if (!$reqdUsers) {
            LogDebug ("New-BrokerUser  -AdminAddress $ddcAddress -Name $brokerUser")
            New-BrokerUser  -AdminAddress $ddcAddress -Name $brokerUser
        }
    }

#$brokerUsers = @($userSID)
#$reqdUsers = Get-BrokerUser  -AdminAddress $ddcAddress -Filter {(SID -in $brokerUsers)} -MaxRecordCount 2147483647
#if (!$reqdUsers) {
#    New-BrokerUser  -AdminAddress $ddcAddress -Name $userName
#}


# Setup access policies
$directAccessPolName = "$($desktopGrpName)_Direct"
$polTestResult = Test-BrokerAccessPolicyRuleNameAvailable  -AdminAddress $ddcAddress -Name @($directAccessPolName)
if ($polTestResult.Available) {
    LogDebug ("New-BrokerAccessPolicyRule  -AdminAddress $ddcAddress -AllowedConnections 'NotViaAG' -AllowedProtocols @('HDX','RDP') -AllowRestart $True -DesktopGroupUid $desktopGroupUid -Enabled $True -IncludedSmartAccessFilterEnabled $True -IncludedUserFilterEnabled $True -IncludedUsers $userNames -LoggingId $($highLevelOp.Id) -Name $directAccessPolName")
    New-BrokerAccessPolicyRule  -AdminAddress $ddcAddress -AllowedConnections 'NotViaAG' -AllowedProtocols @('HDX','RDP') -AllowRestart $True -DesktopGroupUid $desktopGroupUid -Enabled $True -IncludedSmartAccessFilterEnabled $True -IncludedUserFilterEnabled $True -IncludedUsers $userNames -LoggingId $highLevelOp.Id -Name $directAccessPolName 
}

$agAccessPolName = "$($desktopGrpName)_AG"
$polTestResult = Test-BrokerAccessPolicyRuleNameAvailable  -AdminAddress $ddcAddress -Name @($agAccessPolName)
if ($polTestResult.Available) {
    LogDebug ("New-BrokerAccessPolicyRule  -AdminAddress $ddcAddress -AllowedConnections 'ViaAG' -AllowedProtocols @('HDX','RDP') -AllowRestart $True -DesktopGroupUid $desktopGroupUid -Enabled $True -IncludedSmartAccessFilterEnabled $True -IncludedSmartAccessTags @() -IncludedUserFilterEnabled $True -IncludedUsers $userNames -LoggingId $($highLevelOp.Id) -Name $agAccessPolName")
    New-BrokerAccessPolicyRule  -AdminAddress $ddcAddress -AllowedConnections 'ViaAG' -AllowedProtocols @('HDX','RDP') -AllowRestart $True -DesktopGroupUid $desktopGroupUid -Enabled $True -IncludedSmartAccessFilterEnabled $True -IncludedSmartAccessTags @() -IncludedUserFilterEnabled $True -IncludedUsers $userNames -LoggingId $highLevelOp.Id -Name $agAccessPolName
}

if ($catalogSessionSupport -ne "MultiSession")
{
    # Setup power on policies
    $weekdayPowerPolName = "$($desktopGrpName)_Weekdays"
    $polTestResult = Test-BrokerPowerTimeSchemeNameAvailable  -AdminAddress $ddcAddress -Name @($weekdayPowerPolName)
    if ($polTestResult.Available) {
        LogDebug ("New-BrokerPowerTimeScheme  -AdminAddress $ddcAddress -DaysOfWeek 'Weekdays' -DesktopGroupUid $desktopGroupUid -DisplayName 'Weekdays' -LoggingId $($highLevelOp.Id) -Name $weekdayPowerPolName -PeakHours @($False,$False,$False,$False,$False,$False,$False,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$False,$False,$False,$False,$False) -PoolSize @(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)")
        New-BrokerPowerTimeScheme  -AdminAddress $ddcAddress -DaysOfWeek 'Weekdays' -DesktopGroupUid $desktopGroupUid -DisplayName 'Weekdays' -LoggingId $highLevelOp.Id -Name $weekdayPowerPolName -PeakHours @($False,$False,$False,$False,$False,$False,$False,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$False,$False,$False,$False,$False) -PoolSize @(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    }

    $weekendPowerPolName = "$($desktopGrpName)_Weekend"
    $polTestResult = Test-BrokerPowerTimeSchemeNameAvailable  -AdminAddress $ddcAddress -Name @($weekendPowerPolName)
    if ($polTestResult.Available) {
        LogDebug ("New-BrokerPowerTimeScheme  -AdminAddress $ddcAddress -DaysOfWeek 'Weekend' -DesktopGroupUid $desktopGroupUid -DisplayName 'Weekend' -LoggingId $($highLevelOp.Id) -Name $weekendPowerPolName  -PeakHours @($False,$False,$False,$False,$False,$False,$False,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$False,$False,$False,$False,$False) -PoolSize @(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)")
        New-BrokerPowerTimeScheme  -AdminAddress $ddcAddress -DaysOfWeek 'Weekend' -DesktopGroupUid $desktopGroupUid -DisplayName 'Weekend' -LoggingId $highLevelOp.Id -Name $weekendPowerPolName  -PeakHours @($False,$False,$False,$False,$False,$False,$False,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$True,$False,$False,$False,$False,$False) -PoolSize @(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0)
    }
}
    Set-BrokerCatalogMetadata  -AdminAddress $ddcAddress -CatalogId $newCatalog.Uid -LoggingId $highLevelOp.Id -Name 'DIaaS_Status' -Value "Ready"
    $succeeded = $true

}
catch [System.Exception] {
    Set-BrokerCatalogMetadata  -AdminAddress $ddcAddress -CatalogId $newCatalog.Uid -LoggingId $highLevelOp.Id -Name 'DIaaS_Status' -Value "Create failed when assigning users"
    LogError("Problem with desktop delivery group creation " + $_ )
    throw $_
}
finally
{
    # Log high level operation stop, and indicate its success
    # http://support.citrix.com/proddocs/topic/citrix-configurationlogging-admin-v1-xd75/start-loghighleveloperation-xd75.html
    Stop-LogHighLevelOperation  -AdminAddress $ddcAddress -HighLevelOperationId $highLevelOp.Id -IsSuccessful $succeeded
}
LogInfo("Succeeded in creating catalog $catalogName with $machineCount machines" )

#------------------END DesktopGroupCreate-------------------------------

